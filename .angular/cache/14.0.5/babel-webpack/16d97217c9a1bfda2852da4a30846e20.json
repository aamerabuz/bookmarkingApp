{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/aamer/Desktop/cambium/bookmarking-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AppServicesService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.token = '';\n    this.userId = '';\n    this.tabs$ = new BehaviorSubject([]);\n    this.categories$ = new BehaviorSubject([]);\n    this.marks$ = new BehaviorSubject([]);\n    this.isLogin$ = new BehaviorSubject(false);\n    this.selectedTabSubject$ = new BehaviorSubject(null);\n    this.selectedCategorySubject$ = new BehaviorSubject(null);\n    this.selectedMarkForEdit$ = new BehaviorSubject(null);\n  }\n\n  getTabs() {\n    return this.tabs$.asObservable();\n  }\n\n  getCategories() {\n    return this.categories$.asObservable();\n  }\n\n  getMarks() {\n    return this.marks$.asObservable();\n  }\n\n  setToken(token) {\n    this.token = token;\n  }\n\n  settUseId(userId) {\n    this.userId = userId;\n  }\n\n  getToken() {\n    return this.token;\n  }\n\n  getUseId() {\n    return this.userId;\n  }\n\n  setTabs(tabs) {\n    this.tabs$.next(tabs);\n  }\n\n  setCategories(categories) {\n    this.categories$.next(categories);\n  }\n\n  setMarks(marks) {\n    this.marks$.next(marks);\n  }\n\n  getIsLoginStatus() {\n    return this.isLogin$.asObservable();\n  }\n\n  setIsLoginStatus(status) {\n    this.isLogin$.next(status);\n  }\n\n  setSelectedMarkForEdit(mark) {\n    this.selectedMarkForEdit$.next(mark);\n  }\n\n  getSelectedMarkForEdit() {\n    return this.selectedMarkForEdit$.asObservable();\n  }\n\n  getSelectedTab() {\n    return this.selectedTabSubject$.asObservable();\n  }\n\n  getSelectedCategory() {\n    return this.selectedCategorySubject$.asObservable();\n  }\n\n  setSelectedTab(tab) {\n    this.selectedTabSubject$.next(tab);\n    this.setSelectedCategory(null);\n  }\n\n  setSelectedCategory(category) {\n    console.log(category);\n    this.selectedCategorySubject$.next(category);\n  }\n\n  getRoot() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this.http.get('http://localhost:5000/api/').subscribe(data => {\n          console.log(data);\n          console.log(data);\n\n          if (!data.message) {\n            _this.setMarks(data.marks);\n\n            _this.setCategories(data.categories);\n\n            _this.setTabs(data.tabs);\n\n            _this.settUseId(data.userId); // this.set('authToken',data.token)\n\n\n            _this.setIsLoginStatus(true);\n\n            _this.router.navigate(['/']);\n\n            resolve(true);\n          } else {\n            _this.setIsLoginStatus(false);\n\n            _this.router.navigate(['/login']);\n\n            resolve(false);\n          }\n        });\n      });\n    })();\n  }\n\n  createNewTab() {\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {// this.http.post\n      });\n    })();\n  }\n\n}\n\nAppServicesService.ɵfac = function AppServicesService_Factory(t) {\n  return new (t || AppServicesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nAppServicesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppServicesService,\n  factory: AppServicesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","AppServicesService","constructor","http","router","getTabs","tabs$","asObservable","getCategories","categories$","getMarks","marks$","setToken","token","settUseId","userId","getToken","getUseId","setTabs","tabs","next","setCategories","categories","setMarks","marks","getIsLoginStatus","isLogin$","setIsLoginStatus","status","setSelectedMarkForEdit","mark","selectedMarkForEdit$","getSelectedMarkForEdit","getSelectedTab","selectedTabSubject$","getSelectedCategory","selectedCategorySubject$","setSelectedTab","tab","setSelectedCategory","category","console","log","getRoot","Promise","resolve","reject","get","subscribe","data","message","navigate","createNewTab","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aamer\\Desktop\\cambium\\bookmarking-app\\src\\app\\services\\app-services.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { BookMark } from '../models/bookmarking.interface';\nimport { Category } from '../models/category.interface';\nimport { Tab } from '../models/tabs.interface';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppServicesService {\n  private token: string = ''\n  private userId: string = ''\n  private tabs$: BehaviorSubject<Tab[]> = new BehaviorSubject<Tab[]>([]);\n  private categories$: BehaviorSubject<Category[]> = new BehaviorSubject<Category[]>([]);\n  private marks$: BehaviorSubject<BookMark[]> = new BehaviorSubject<BookMark[]>([]);\n  private isLogin$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  private selectedTabSubject$: BehaviorSubject<any> = new BehaviorSubject(null)\n  private selectedCategorySubject$: BehaviorSubject<any> = new BehaviorSubject(null)\n  private selectedMarkForEdit$: BehaviorSubject<any> = new BehaviorSubject(null)\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) { }\n\n\n\n\n  public getTabs(): Observable<Tab[]> {\n    return this.tabs$.asObservable();\n  }\n  public getCategories(): Observable<Category[]> {\n    return this.categories$.asObservable();\n  }\n  public getMarks(): Observable<BookMark[]> {\n    return this.marks$.asObservable();\n  }\n\n  public setToken(token: string): void {\n    this.token = token;\n  }\n  public settUseId(userId: string): void {\n    this.userId = userId;\n  }\n\n  public getToken(): string {\n    return this.token;\n  }\n  public getUseId(): string {\n    return this.userId;\n  }\n\n  public setTabs(tabs: any): void {\n    this.tabs$.next(tabs);\n  }\n  public setCategories(categories: any): void {\n    this.categories$.next(categories);\n  }\n  public setMarks(marks: any): void {\n    this.marks$.next(marks)\n  }\n\n  public getIsLoginStatus(): Observable<boolean> {\n    return this.isLogin$.asObservable()\n  }\n\n  public setIsLoginStatus(status: boolean): void {\n    this.isLogin$.next(status)\n  }\n\n  public setSelectedMarkForEdit(mark: BookMark): void {\n    this.selectedMarkForEdit$.next(mark)\n  }\n\n\n  public getSelectedMarkForEdit(): Observable<any> {\n    return this.selectedMarkForEdit$.asObservable()\n  }\n\n  public getSelectedTab(): Observable<Tab> {\n    return this.selectedTabSubject$.asObservable();\n  }\n  public getSelectedCategory(): Observable<Category> {\n    return this.selectedCategorySubject$.asObservable();\n  }\n\n  public setSelectedTab(tab: any): void {\n    this.selectedTabSubject$.next(tab)\n    this.setSelectedCategory(null)\n  }\n  public setSelectedCategory(category: any): void {\n    console.log(category)\n    this.selectedCategorySubject$.next(category)\n  }\n\n\n  async getRoot() : Promise<any> {\n    return new Promise((resolve ,reject) => {\n      this.http.get('http://localhost:5000/api/').subscribe((data: any) => {\n        console.log(data)\n        console.log(data)\n        if (!data.message) {\n          this.setMarks(data.marks)\n          this.setCategories(data.categories)\n          this.setTabs(data.tabs)\n          this.settUseId(data.userId)\n          // this.set('authToken',data.token)\n          this.setIsLoginStatus(true)\n          this.router.navigate(['/'])\n          resolve(true)\n        } else {\n          this.setIsLoginStatus(false)\n          this.router.navigate(['/login'])\n          resolve(false)\n        }\n      })\n    })\n  }\n\n\n  async createNewTab() : Promise<any> {\n    return new Promise((resolve , reject) => {\n      // this.http.post\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}