{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/aamer/Desktop/cambium/bookmarking-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-cookie-service\";\nexport class AppServicesService {\n  constructor(http, router, cookieService) {\n    this.http = http;\n    this.router = router;\n    this.cookieService = cookieService;\n    this.token = '';\n    this.userId = '';\n    this.tabs$ = new BehaviorSubject([]);\n    this.categories$ = new BehaviorSubject([]);\n    this.marks$ = new BehaviorSubject([]);\n    this.isLogin$ = new BehaviorSubject(false);\n    this.selectedTabSubject$ = new BehaviorSubject(null);\n    this.selectedCategorySubject$ = new BehaviorSubject(null);\n    this.selectedMarkForEdit$ = new BehaviorSubject(null);\n  }\n\n  getTabs() {\n    return this.tabs$.asObservable();\n  }\n\n  getCategories() {\n    return this.categories$.asObservable();\n  }\n\n  getMarks() {\n    return this.marks$.asObservable();\n  }\n\n  setToken(token) {\n    this.token = token;\n  }\n\n  settUseId(userId) {\n    this.userId = userId;\n  }\n\n  getToken() {\n    return this.token;\n  }\n\n  getUseId() {\n    const userId = this.cookieService.get('userId');\n    return userId;\n  }\n\n  setTabs(tabs) {\n    this.tabs$.next(tabs);\n  }\n\n  setCategories(categories) {\n    this.categories$.next(categories);\n  }\n\n  setMarks(marks) {\n    this.marks$.next(marks);\n  }\n\n  updateTabs(tabs, actoin) {\n    console.log('updateTabs function start');\n    console.log(tabs);\n\n    switch (actoin) {\n      case 'add':\n        {\n          let newTabs;\n          this.getTabs().subscribe(data => {\n            console.log('this.getTabs().subscribe(data => {');\n            newTabs = [...data];\n            newTabs.push(tabs);\n          });\n          this.setTabs(newTabs);\n        }\n    }\n  }\n\n  updateCategories(categories, actoin) {\n    switch (actoin) {\n      case 'add':\n        {\n          this.getCategories().subscribe(data => {\n            let newCategoris = [...data];\n            newCategoris.push(categories);\n            this.setTabs(newCategoris);\n          });\n        }\n    }\n  }\n\n  updateMarks(marks, actoin) {\n    switch (actoin) {\n      case 'add':\n        {\n          this.getCategories().subscribe(data => {\n            let newMarks = [...data];\n            newMarks.push(marks);\n            this.setTabs(newMarks);\n          });\n        }\n        break;\n\n      case 'remove':\n        {\n          console.log('');\n        }\n    }\n  }\n\n  getIsLoginStatus() {\n    return this.isLogin$.asObservable();\n  }\n\n  setIsLoginStatus(status) {\n    this.isLogin$.next(status);\n  }\n\n  setSelectedMarkForEdit(mark) {\n    this.selectedMarkForEdit$.next(mark);\n  }\n\n  getSelectedMarkForEdit() {\n    return this.selectedMarkForEdit$.asObservable();\n  }\n\n  getSelectedTab() {\n    return this.selectedTabSubject$.asObservable();\n  }\n\n  getSelectedCategory() {\n    return this.selectedCategorySubject$.asObservable();\n  }\n\n  setSelectedTab(tab) {\n    this.selectedTabSubject$.next(tab);\n    this.setSelectedCategory(null);\n  }\n\n  setSelectedCategory(category) {\n    console.log(category);\n    this.selectedCategorySubject$.next(category);\n  }\n\n  getRoot() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this.http.get('http://localhost:5000/api/').subscribe(data => {\n          console.log(data);\n          console.log(data);\n\n          if (!data.message) {\n            _this.setMarks(data.marks);\n\n            _this.setCategories(data.categories);\n\n            _this.setTabs(data.tabs);\n\n            _this.settUseId(data.userId);\n\n            _this.cookieService.set('userId', data.userId); // this.set('authToken',data.token)\n\n\n            _this.setIsLoginStatus(true);\n\n            _this.router.navigate(['/']);\n\n            resolve(true);\n          } else {\n            _this.setIsLoginStatus(false);\n\n            _this.router.navigate(['/login']);\n\n            resolve(false);\n          }\n        });\n      });\n    })();\n  }\n\n  createNewTab(title, description, color) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this2.http.post('http://localhost:5000/api/createNewTab', {\n          title: title,\n          description: description,\n          color: color,\n          userId: _this2.getUseId()\n        }, {\n          withCredentials: true\n        }).subscribe(data => {\n          console.log(data);\n          resolve(data);\n        });\n      });\n    })();\n  }\n\n}\n\nAppServicesService.ɵfac = function AppServicesService_Factory(t) {\n  return new (t || AppServicesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.CookieService));\n};\n\nAppServicesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppServicesService,\n  factory: AppServicesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","AppServicesService","constructor","http","router","cookieService","getTabs","tabs$","asObservable","getCategories","categories$","getMarks","marks$","setToken","token","settUseId","userId","getToken","getUseId","get","setTabs","tabs","next","setCategories","categories","setMarks","marks","updateTabs","actoin","console","log","newTabs","subscribe","data","push","updateCategories","newCategoris","updateMarks","newMarks","getIsLoginStatus","isLogin$","setIsLoginStatus","status","setSelectedMarkForEdit","mark","selectedMarkForEdit$","getSelectedMarkForEdit","getSelectedTab","selectedTabSubject$","getSelectedCategory","selectedCategorySubject$","setSelectedTab","tab","setSelectedCategory","category","getRoot","Promise","resolve","reject","message","set","navigate","createNewTab","title","description","color","post","withCredentials","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aamer\\Desktop\\cambium\\bookmarking-app\\src\\app\\services\\app-services.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { BookMark } from '../models/bookmarking.interface';\nimport { Category } from '../models/category.interface';\nimport { Tab } from '../models/tabs.interface';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service'\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppServicesService {\n  private token: string = ''\n  private userId: string = ''\n  private tabs$: BehaviorSubject<Tab[]> = new BehaviorSubject<Tab[]>([]);\n  private categories$: BehaviorSubject<Category[]> = new BehaviorSubject<Category[]>([]);\n  private marks$: BehaviorSubject<BookMark[]> = new BehaviorSubject<BookMark[]>([]);\n  private isLogin$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  private selectedTabSubject$: BehaviorSubject<any> = new BehaviorSubject(null)\n  private selectedCategorySubject$: BehaviorSubject<any> = new BehaviorSubject(null)\n  private selectedMarkForEdit$: BehaviorSubject<any> = new BehaviorSubject(null)\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private cookieService: CookieService\n  ) { }\n\n\n\n\n  public getTabs(): Observable<Tab[]> {\n    return this.tabs$.asObservable();\n  }\n  public getCategories(): Observable<Category[]> {\n    return this.categories$.asObservable();\n  }\n  public getMarks(): Observable<BookMark[]> {\n    return this.marks$.asObservable();\n  }\n\n  public setToken(token: string): void {\n    this.token = token;\n  }\n  public settUseId(userId: string): void {\n    this.userId = userId;\n  }\n\n  public getToken(): string {\n    return this.token;\n  }\n  public getUseId(): string {\n    const userId = this.cookieService.get('userId')\n    return userId;\n  }\n\n  public setTabs(tabs: any): void {\n    this.tabs$.next(tabs);\n  }\n  public setCategories(categories: any): void {\n    this.categories$.next(categories);\n  }\n  public setMarks(marks: any): void {\n    this.marks$.next(marks)\n  }\n  public updateTabs(tabs: any, actoin: string): void {\n    console.log('updateTabs function start')\n    console.log(tabs)\n    switch (actoin) {\n      case 'add': {\n        let newTabs;\n        this.getTabs().subscribe(data => {\n          console.log('this.getTabs().subscribe(data => {')\n          newTabs = [...data];\n          newTabs.push(tabs)\n        })\n        this.setTabs(newTabs)\n      }\n    }\n  }\n  public updateCategories(categories: any, actoin: string): void {\n    switch (actoin) {\n      case 'add': {\n        this.getCategories().subscribe(data => {\n          let newCategoris = [...data];\n          newCategoris.push(categories)\n          this.setTabs(newCategoris)\n        })\n      }\n    }\n  }\n  public updateMarks(marks: any, actoin: string): void {\n    switch (actoin) {\n      case 'add': {\n        this.getCategories().subscribe(data => {\n          let newMarks = [...data];\n          newMarks.push(marks)\n          this.setTabs(newMarks)\n        })\n      } break;\n      case 'remove': {\n        console.log('')\n      }\n\n    }\n  }\n\n  public getIsLoginStatus(): Observable<boolean> {\n    return this.isLogin$.asObservable()\n  }\n\n  public setIsLoginStatus(status: boolean): void {\n    this.isLogin$.next(status)\n  }\n\n  public setSelectedMarkForEdit(mark: BookMark): void {\n    this.selectedMarkForEdit$.next(mark)\n  }\n\n\n  public getSelectedMarkForEdit(): Observable<any> {\n    return this.selectedMarkForEdit$.asObservable()\n  }\n\n  public getSelectedTab(): Observable<Tab> {\n    return this.selectedTabSubject$.asObservable();\n  }\n  public getSelectedCategory(): Observable<Category> {\n    return this.selectedCategorySubject$.asObservable();\n  }\n\n  public setSelectedTab(tab: any): void {\n    this.selectedTabSubject$.next(tab)\n    this.setSelectedCategory(null)\n  }\n  public setSelectedCategory(category: any): void {\n    console.log(category)\n    this.selectedCategorySubject$.next(category)\n  }\n\n\n  async getRoot(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.http.get('http://localhost:5000/api/').subscribe((data: any) => {\n        console.log(data)\n        console.log(data)\n        if (!data.message) {\n          this.setMarks(data.marks)\n          this.setCategories(data.categories)\n          this.setTabs(data.tabs)\n          this.settUseId(data.userId)\n          this.cookieService.set('userId', data.userId)\n          // this.set('authToken',data.token)\n          this.setIsLoginStatus(true)\n          this.router.navigate(['/'])\n          resolve(true)\n        } else {\n          this.setIsLoginStatus(false)\n          this.router.navigate(['/login'])\n          resolve(false)\n        }\n      })\n    })\n  }\n\n\n  async createNewTab(title: string, description: string, color: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.http.post('http://localhost:5000/api/createNewTab',\n        {\n          title: title,\n          description: description,\n          color: color,\n          userId: this.getUseId()\n        }, {\n        withCredentials: true\n      }).subscribe(data => {\n        console.log(data)\n        resolve(data);\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}