{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/aamer/Desktop/cambium/bookmarking-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./app-services.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ngx-cookie-service\";\nexport class AuthService {\n  constructor(http, appService, router, cookieService) {\n    this.http = http;\n    this.appService = appService;\n    this.router = router;\n    this.cookieService = cookieService;\n  }\n\n  loginService(email, password) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // this.http.post('http://localhost:5000/api/login');\n      let status;\n      return new Promise((resolve, reject) => {\n        _this.http.post('http://localhost:5000/api/login', {\n          email: email,\n          password: password\n        }, {\n          withCredentials: true\n        }).subscribe(data => {\n          console.log('log in data');\n\n          if (data.token) {\n            _this.appService.setMarks(data.marks);\n\n            _this.appService.setCategories(data.categories);\n\n            _this.appService.setTabs(data.tabs);\n\n            _this.cookieService.set('authToken', data.token);\n\n            _this.appService.setIsLoginStatus(true);\n\n            _this.router.navigate(['/']);\n\n            resolve(true);\n          } else {\n            _this.appService.setIsLoginStatus(false);\n\n            reject(false);\n          }\n        });\n      });\n    })();\n  }\n\n  signUpService(email, password) {\n    // this.http.post('http://localhost:5000/api/login');\n    this.http.post('http://localhost:5000/api/signup', {\n      email: email,\n      password: password\n    }, {\n      withCredentials: true\n    }).subscribe(data => {\n      console.log(data);\n    });\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppServicesService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.CookieService));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;AAUA,OAAM,MAAOA,WAAP,CAAkB;EAItBC,YACUC,IADV,EAEUC,UAFV,EAGUC,MAHV,EAIUC,aAJV,EAIsC;IAH5B;IACA;IACA;IACA;EAEL;;EAECC,YAAY,CAACC,KAAD,EAAgBC,QAAhB,EAAgC;IAAA;;IAAA;MAChD;MACA,IAAIC,MAAJ;MACA,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;QACrC,KAAI,CAACV,IAAL,CAAUW,IAAV,CAAe,iCAAf,EACE;UACEN,KAAK,EAAEA,KADT;UAEEC,QAAQ,EAAEA;QAFZ,CADF,EAKE;UACEM,eAAe,EAAE;QADnB,CALF,EAOKC,SAPL,CAOgBC,IAAD,IAAc;UACzBC,OAAO,CAACC,GAAR,CAAY,aAAZ;;UACA,IAAIF,IAAI,CAACG,KAAT,EAAgB;YACd,KAAI,CAAChB,UAAL,CAAgBiB,QAAhB,CAAyBJ,IAAI,CAACK,KAA9B;;YACA,KAAI,CAAClB,UAAL,CAAgBmB,aAAhB,CAA8BN,IAAI,CAACO,UAAnC;;YACA,KAAI,CAACpB,UAAL,CAAgBqB,OAAhB,CAAwBR,IAAI,CAACS,IAA7B;;YACA,KAAI,CAACpB,aAAL,CAAmBqB,GAAnB,CAAuB,WAAvB,EAAoCV,IAAI,CAACG,KAAzC;;YACA,KAAI,CAAChB,UAAL,CAAgBwB,gBAAhB,CAAiC,IAAjC;;YACA,KAAI,CAACvB,MAAL,CAAYwB,QAAZ,CAAqB,CAAC,GAAD,CAArB;;YACAjB,OAAO,CAAC,IAAD,CAAP;UACD,CARD,MAQO;YACL,KAAI,CAACR,UAAL,CAAgBwB,gBAAhB,CAAiC,KAAjC;;YACAf,MAAM,CAAC,KAAD,CAAN;UACD;QACF,CArBH;MAsBD,CAvBM,CAAP;IAHgD;EA2BjD;;EAEDiB,aAAa,CAACtB,KAAD,EAAgBC,QAAhB,EAAgC;IAC3C;IACA,KAAKN,IAAL,CAAUW,IAAV,CAAe,kCAAf,EACE;MACEN,KAAK,EAAEA,KADT;MAEEC,QAAQ,EAAEA;IAFZ,CADF,EAKE;MACEM,eAAe,EAAE;IADnB,CALF,EAOKC,SAPL,CAOeC,IAAI,IAAG;MAClBC,OAAO,CAACC,GAAR,CAAYF,IAAZ;IACD,CATH;EAUD;;AArDqB;;;mBAAXhB,aAAW8B;AAAA;;;SAAX9B;EAAW+B,SAAX/B,WAAW;EAAAgC,YAFV","names":["AuthService","constructor","http","appService","router","cookieService","loginService","email","password","status","Promise","resolve","reject","post","withCredentials","subscribe","data","console","log","token","setMarks","marks","setCategories","categories","setTabs","tabs","set","setIsLoginStatus","navigate","signUpService","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aamer\\Desktop\\cambium\\bookmarking-app\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AppServicesService } from './app-services.service';\nimport { Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service'\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n\n\n  constructor(\n    private http: HttpClient,\n    private appService: AppServicesService,\n    private router: Router,\n    private cookieService: CookieService\n\n  ) { }\n\n  async loginService(email: string, password: string): Promise<any> {\n    // this.http.post('http://localhost:5000/api/login');\n    let status;\n    return new Promise((resolve, reject) => {\n      this.http.post('http://localhost:5000/api/login',\n        {\n          email: email,\n          password: password\n        },\n        {\n          withCredentials: true\n        }).subscribe((data: any) => {\n          console.log('log in data')\n          if (data.token) {\n            this.appService.setMarks(data.marks)\n            this.appService.setCategories(data.categories)\n            this.appService.setTabs(data.tabs)\n            this.cookieService.set('authToken', data.token)\n            this.appService.setIsLoginStatus(true)\n            this.router.navigate(['/'])\n            resolve(true)\n          } else {\n            this.appService.setIsLoginStatus(false)\n            reject(false)\n          }\n        })\n    })\n  }\n\n  signUpService(email: string, password: string) {\n    // this.http.post('http://localhost:5000/api/login');\n    this.http.post('http://localhost:5000/api/signup',\n      {\n        email: email,\n        password: password\n      },\n      {\n        withCredentials: true\n      }).subscribe(data => {\n        console.log(data)\n      })\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}