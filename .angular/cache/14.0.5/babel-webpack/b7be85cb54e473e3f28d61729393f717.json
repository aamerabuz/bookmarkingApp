{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/aamer/Desktop/cambium/bookmarking-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-cookie-service\";\nexport class AppServicesService {\n  constructor(http, router, cookieService) {\n    this.http = http;\n    this.router = router;\n    this.cookieService = cookieService;\n    this.token = '';\n    this.userId = '';\n    this.tabs$ = new BehaviorSubject([]);\n    this.categories$ = new BehaviorSubject([]);\n    this.marks$ = new BehaviorSubject([]);\n    this.isLogin$ = new BehaviorSubject(false);\n    this.selectedTabSubject$ = new BehaviorSubject(null);\n    this.selectedCategorySubject$ = new BehaviorSubject(null);\n    this.selectedMarkForEdit$ = new BehaviorSubject(null);\n  }\n\n  getTabs() {\n    return this.tabs$.asObservable();\n  }\n\n  getCategories() {\n    return this.categories$.asObservable();\n  }\n\n  getMarks() {\n    return this.marks$.asObservable();\n  }\n\n  setToken(token) {\n    this.token = token;\n  }\n\n  settUseId(userId) {\n    this.userId = userId;\n  }\n\n  getToken() {\n    return this.token;\n  }\n\n  getUseId() {\n    const userId = this.cookieService.get('userId');\n    return userId;\n  }\n\n  setTabs(tabs) {\n    this.tabs$.next(tabs);\n  }\n\n  setCategories(categories) {\n    this.categories$.next(categories);\n  }\n\n  setMarks(marks) {\n    this.marks$.next(marks);\n  }\n\n  updateTabs(tab, actoin) {\n    console.log('updateTabs function start');\n    console.log(tab);\n\n    switch (actoin) {\n      case 'add':\n        {\n          let newTabs;\n          this.getTabs().subscribe(data => {\n            console.log('this.getTabs().subscribe(data => {');\n            newTabs = [...data];\n            newTabs.push(tab);\n          });\n          this.setTabs(newTabs);\n          this.router.navigate(['/categorys']);\n          this.setSelectedTab(tab);\n        }\n    }\n  }\n\n  updateCategories(category, actoin) {\n    switch (actoin) {\n      case 'add':\n        {\n          let newCategoris;\n          this.getCategories().subscribe(data => {\n            newCategoris = [...data];\n            newCategoris.push(category);\n          });\n          this.setCategories(newCategoris);\n          this.router.navigate(['/bookMarks']);\n          this.setSelectedCategory(category);\n        }\n    }\n  }\n\n  updateMarks(mark, actoin) {\n    switch (actoin) {\n      case 'add':\n        {\n          let newMarks;\n          this.getMarks().subscribe(data => {\n            newMarks = [...data];\n            newMarks.push(mark);\n          });\n          this.setMarks(newMarks);\n          this.router.navigate(['/bookMarks']);\n        }\n        break;\n\n      case 'remove':\n        {\n          let newMarks;\n          this.getMarks().subscribe(data => {\n            newMarks = [...data];\n            newMarks = newMarks.filter(m => m._id !== mark.id);\n          });\n          this.setMarks(newMarks);\n          this.router.navigate(['/bookMarks']);\n        }\n        break;\n\n      case 'update':\n        {\n          let newMarks;\n          this.getMarks().subscribe(data => {\n            newMarks = [...data];\n            newMarks = newMarks.map(m => {\n              if (m._id === mark._id) {\n                m.title = mark.title;\n                m.description = mark.description;\n                m.url = mark.url;\n                m.color = mark.color;\n                return m;\n              }\n\n              return m;\n            });\n          });\n          this.setMarks(newMarks);\n          this.router.navigate(['/bookMarks']);\n        }\n    }\n  }\n\n  getIsLoginStatus() {\n    return this.isLogin$.asObservable();\n  }\n\n  setIsLoginStatus(status) {\n    this.isLogin$.next(status);\n  }\n\n  setSelectedMarkForEdit(mark) {\n    this.selectedMarkForEdit$.next(mark);\n  }\n\n  getSelectedMarkForEdit() {\n    return this.selectedMarkForEdit$.asObservable();\n  }\n\n  getSelectedTab() {\n    return this.selectedTabSubject$.asObservable();\n  }\n\n  getSelectedCategory() {\n    return this.selectedCategorySubject$.asObservable();\n  }\n\n  setSelectedTab(tab) {\n    this.selectedTabSubject$.next(tab); // this.setSelectedCategory(null)\n  }\n\n  setSelectedCategory(category) {\n    this.selectedCategorySubject$.next(category);\n  }\n\n  getRoot() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this.http.get('http://localhost:5000/api/').subscribe(data => {\n          if (!data.message) {\n            _this.setMarks(data.marks);\n\n            _this.setCategories(data.categories);\n\n            _this.setTabs(data.tabs);\n\n            _this.settUseId(data.userId);\n\n            _this.cookieService.set('userId', data.userId);\n\n            _this.setIsLoginStatus(true);\n\n            _this.router.navigate(['/']);\n\n            resolve(true);\n          } else {\n            _this.setIsLoginStatus(false);\n\n            _this.router.navigate(['/login']);\n\n            resolve(false);\n          }\n        });\n      });\n    })();\n  }\n\n  createNewTab(title, description, color) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this2.http.post('http://localhost:5000/api/createNewTab', {\n          title: title,\n          description: description,\n          color: color,\n          userId: _this2.getUseId()\n        }, {\n          withCredentials: true\n        }).subscribe(data => {\n          console.log(data);\n          resolve(data);\n        });\n      });\n    })();\n  }\n\n  createNewCategory(title, description, color, tabId) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this3.http.post('http://localhost:5000/api/createNewCategory', {\n          title: title,\n          description: description,\n          color: color,\n          tabId: tabId\n        }, {\n          withCredentials: true\n        }).subscribe(data => {\n          console.log(data);\n          resolve(data);\n        });\n      });\n    })();\n  }\n\n  createNewMark(title, description, url, color, categoryId) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this4.http.post('http://localhost:5000/api/createNewMark', {\n          title: title,\n          description: description,\n          url: url,\n          color: color,\n          categoryId: categoryId\n        }, {\n          withCredentials: true\n        }).subscribe(data => {\n          console.log(data);\n          resolve(data);\n        });\n      });\n    })();\n  }\n\n  updateMark(_id, title, description, url, color) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this5.http.post('http://localhost:5000/api/updateMark', {\n          _id: _id,\n          title: title,\n          description: description,\n          url: url,\n          color: color\n        }, {\n          withCredentials: true\n        }).subscribe(data => {\n          console.log(data);\n          resolve(data);\n        });\n      });\n    })();\n  }\n\n  deleteMark(_id) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this6.http.post('http://localhost:5000/api/deleteMark', {\n          _id: _id\n        }, {\n          withCredentials: true\n        }).subscribe(data => {\n          console.log(data);\n          resolve(data);\n        });\n      });\n    })();\n  }\n\n}\n\nAppServicesService.ɵfac = function AppServicesService_Factory(t) {\n  return new (t || AppServicesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.CookieService));\n};\n\nAppServicesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppServicesService,\n  factory: AppServicesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","AppServicesService","constructor","http","router","cookieService","getTabs","tabs$","asObservable","getCategories","categories$","getMarks","marks$","setToken","token","settUseId","userId","getToken","getUseId","get","setTabs","tabs","next","setCategories","categories","setMarks","marks","updateTabs","tab","actoin","console","log","newTabs","subscribe","data","push","navigate","setSelectedTab","updateCategories","category","newCategoris","setSelectedCategory","updateMarks","mark","newMarks","filter","m","_id","id","map","title","description","url","color","getIsLoginStatus","isLogin$","setIsLoginStatus","status","setSelectedMarkForEdit","selectedMarkForEdit$","getSelectedMarkForEdit","getSelectedTab","selectedTabSubject$","getSelectedCategory","selectedCategorySubject$","getRoot","Promise","resolve","reject","message","set","createNewTab","post","withCredentials","createNewCategory","tabId","createNewMark","categoryId","updateMark","deleteMark","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aamer\\Desktop\\cambium\\bookmarking-app\\src\\app\\services\\app-services.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { BookMark } from '../models/bookmarking.interface';\nimport { Category } from '../models/category.interface';\nimport { Tab } from '../models/tabs.interface';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service'\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppServicesService {\n  private token: string = ''\n  private userId: string = ''\n  private tabs$: BehaviorSubject<Tab[]> = new BehaviorSubject<Tab[]>([]);\n  private categories$: BehaviorSubject<Category[]> = new BehaviorSubject<Category[]>([]);\n  private marks$: BehaviorSubject<BookMark[]> = new BehaviorSubject<BookMark[]>([]);\n  private isLogin$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  private selectedTabSubject$: BehaviorSubject<any> = new BehaviorSubject(null)\n  private selectedCategorySubject$: BehaviorSubject<any> = new BehaviorSubject(null)\n  private selectedMarkForEdit$: BehaviorSubject<any> = new BehaviorSubject(null)\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private cookieService: CookieService\n  ) { }\n\n\n\n\n  public getTabs(): Observable<Tab[]> {\n    return this.tabs$.asObservable();\n  }\n  public getCategories(): Observable<Category[]> {\n    return this.categories$.asObservable();\n  }\n  public getMarks(): Observable<BookMark[]> {\n    return this.marks$.asObservable();\n  }\n\n  public setToken(token: string): void {\n    this.token = token;\n  }\n  public settUseId(userId: string): void {\n    this.userId = userId;\n  }\n\n  public getToken(): string {\n    return this.token;\n  }\n  public getUseId(): string {\n    const userId = this.cookieService.get('userId')\n    return userId;\n  }\n\n  public setTabs(tabs: any): void {\n    this.tabs$.next(tabs);\n  }\n  public setCategories(categories: any): void {\n    this.categories$.next(categories);\n  }\n  public setMarks(marks: any): void {\n    this.marks$.next(marks)\n  }\n  public updateTabs(tab: any, actoin: string): void {\n    console.log('updateTabs function start')\n    console.log(tab)\n    switch (actoin) {\n      case 'add': {\n        let newTabs;\n        this.getTabs().subscribe(data => {\n          console.log('this.getTabs().subscribe(data => {')\n          newTabs = [...data];\n          newTabs.push(tab)\n        })\n        this.setTabs(newTabs)\n        this.router.navigate(['/categorys'])\n        this.setSelectedTab(tab)\n      }\n    }\n  }\n  public updateCategories(category: any, actoin: string): void {\n    switch (actoin) {\n      case 'add': {\n        let newCategoris\n        this.getCategories().subscribe(data => {\n          newCategoris = [...data];\n          newCategoris.push(category)\n        })\n        this.setCategories(newCategoris)\n        this.router.navigate(['/bookMarks'])\n        this.setSelectedCategory(category)\n      }\n    }\n  }\n  public updateMarks(mark: any, actoin: string): void {\n    switch (actoin) {\n      case 'add': {\n        let newMarks;\n        this.getMarks().subscribe(data => {\n\n          newMarks = [...data];\n          newMarks.push(mark)\n        })\n        this.setMarks(newMarks)\n        this.router.navigate(['/bookMarks'])\n\n      } break;\n      case 'remove': {\n        let newMarks;\n        this.getMarks().subscribe(data => {\n          newMarks = [...data];\n          newMarks = newMarks.filter(m => m._id !== mark.id)\n        })\n        this.setMarks(newMarks)\n        this.router.navigate(['/bookMarks'])\n      } break;\n      case 'update': {\n        let newMarks;\n        this.getMarks().subscribe(data => {\n          newMarks = [...data];\n          newMarks = newMarks.map(m => {\n            if (m._id === mark._id) {\n              m.title = mark.title\n              m.description = mark.description\n              m.url = mark.url\n              m.color = mark.color\n              return m;\n            }\n            return m;\n          })\n        })\n        this.setMarks(newMarks)\n        this.router.navigate(['/bookMarks'])\n      }\n\n    }\n  }\n\n  public getIsLoginStatus(): Observable<boolean> {\n    return this.isLogin$.asObservable()\n  }\n\n  public setIsLoginStatus(status: boolean): void {\n    this.isLogin$.next(status)\n  }\n\n  public setSelectedMarkForEdit(mark: BookMark): void {\n    this.selectedMarkForEdit$.next(mark)\n  }\n\n\n  public getSelectedMarkForEdit(): Observable<any> {\n    return this.selectedMarkForEdit$.asObservable()\n  }\n\n  public getSelectedTab(): Observable<Tab> {\n    return this.selectedTabSubject$.asObservable();\n  }\n  public getSelectedCategory(): Observable<Category> {\n    return this.selectedCategorySubject$.asObservable();\n  }\n\n  public setSelectedTab(tab: any): void {\n    this.selectedTabSubject$.next(tab)\n    // this.setSelectedCategory(null)\n  }\n  public setSelectedCategory(category: any): void {\n    this.selectedCategorySubject$.next(category)\n  }\n\n\n  async getRoot(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.http.get('http://localhost:5000/api/').subscribe((data: any) => {\n        if (!data.message) {\n          this.setMarks(data.marks)\n          this.setCategories(data.categories)\n          this.setTabs(data.tabs)\n          this.settUseId(data.userId)\n          this.cookieService.set('userId', data.userId)\n          this.setIsLoginStatus(true)\n          this.router.navigate(['/'])\n          resolve(true)\n        } else {\n          this.setIsLoginStatus(false)\n          this.router.navigate(['/login'])\n          resolve(false)\n        }\n      })\n    })\n  }\n\n\n  async createNewTab(title: string, description: string, color: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.http.post('http://localhost:5000/api/createNewTab',\n        {\n          title: title,\n          description: description,\n          color: color,\n          userId: this.getUseId()\n        }, {\n        withCredentials: true\n      }).subscribe(data => {\n        console.log(data)\n        resolve(data);\n      })\n    })\n  }\n\n  async createNewCategory(title: string, description: string, color: string, tabId: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.http.post('http://localhost:5000/api/createNewCategory',\n        {\n          title: title,\n          description: description,\n          color: color,\n          tabId: tabId\n        }, {\n        withCredentials: true\n      }).subscribe(data => {\n        console.log(data)\n        resolve(data);\n      })\n    })\n  }\n\n  async createNewMark(title: string, description: string, url: string, color: string, categoryId: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.http.post('http://localhost:5000/api/createNewMark',\n        {\n          title: title,\n          description: description,\n          url: url,\n          color: color,\n          categoryId: categoryId\n        }, {\n        withCredentials: true\n      }).subscribe(data => {\n        console.log(data)\n        resolve(data);\n      })\n    })\n  }\n\n  async updateMark(_id: string, title: string, description: string, url: string, color: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.http.post('http://localhost:5000/api/updateMark',\n        {\n          _id: _id,\n          title: title,\n          description: description,\n          url: url,\n          color: color,\n        }, {\n        withCredentials: true\n      }).subscribe(data => {\n        console.log(data)\n        resolve(data);\n      })\n    })\n  }\n\n  async deleteMark(_id: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.http.post('http://localhost:5000/api/deleteMark',\n        {\n          _id: _id\n        },\n        { withCredentials: true }\n      ).subscribe(data => {\n        console.log(data)\n        resolve(data);\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}